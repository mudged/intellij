<application>
  <component name="LanguageInjectionConfiguration">
    <injection language="RegExp" injector-id="groovy">
      <display-name>RegExp</display-name>
      <place>groovyElement().annotationParam(&quot;groovy.lang.Newify&quot;, &quot;pattern&quot;)</place>
      <place>groovyLiteralExpression().regExpOperatorArgument()</place>
    </injection>
    <injection language="http-url-reference" injector-id="java">
      <display-name>Android Volley (com.android.volley)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;ImageRequest&quot;).definedInClass(&quot;com.android.volley.toolbox.ImageRequest&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;JsonArrayRequest&quot;).definedInClass(&quot;com.android.volley.toolbox.JsonArrayRequest&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;JsonObjectRequest&quot;).withParameterCount(4).definedInClass(&quot;com.android.volley.toolbox.JsonObjectRequest&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;StringRequest&quot;).withParameterCount(3).definedInClass(&quot;com.android.volley.toolbox.StringRequest&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;JsonObjectRequest&quot;).withParameterCount(5).definedInClass(&quot;com.android.volley.toolbox.JsonObjectRequest&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;StringRequest&quot;).withParameterCount(4).definedInClass(&quot;com.android.volley.toolbox.StringRequest&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>AsyncQueryRunner (org.apache.commons.dbutils)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;batch&quot;).withParameterCount(2).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;insertBatch&quot;).withParameterCount(3).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;).withParameters(&quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;).withParameters(&quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;batch&quot;).withParameterCount(3).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;insertBatch&quot;).withParameterCount(4).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;java.lang.Object&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.AsyncQueryRunner&quot;))</place>
    </injection>
    <injection language="encoding-reference" injector-id="java">
      <display-name>Charset Name</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;forName&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.nio.charset.Charset&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;getBytes&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;isSupported&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.nio.charset.Charset&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;setCharacterEncoding&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(psiClass().withQualifiedName(string().oneOf(&quot;javax.servlet.ServletResponse&quot;, &quot;jakarta.servlet.ServletResponse&quot;))))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;toString&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.io.ByteArrayOutputStream&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;InputStreamReader&quot;).withParameters(&quot;java.io.InputStream&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.io.InputStreamReader&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;OutputStreamWriter&quot;).withParameters(&quot;java.io.OutputStream&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.io.OutputStreamWriter&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;PrintStream&quot;).withParameters(&quot;java.io.File&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.io.PrintStream&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;PrintStream&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.io.PrintStream&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;String&quot;).withParameters(&quot;byte[]&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;createXMLEventReader&quot;).withParameters(&quot;java.io.InputStream&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;javax.xml.stream.XMLInputFactory&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;createXMLEventWriter&quot;).withParameters(&quot;java.io.OutputStream&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;javax.xml.stream.XMLInputFactory&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;createXMLStreamReader&quot;).withParameters(&quot;java.io.InputStream&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;javax.xml.stream.XMLInputFactory&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;createXMLStreamWriter&quot;).withParameters(&quot;java.io.OutputStream&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;javax.xml.stream.XMLInputFactory&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;decode&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.net.URLDecoder&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;encode&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.net.URLEncoder&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;newReader&quot;).withParameters(&quot;java.nio.channels.ReadableByteChannel&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.nio.channels.Channels&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;newWriter&quot;).withParameters(&quot;java.nio.channels.WritableByteChannel&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.nio.channels.Channels&quot;))</place>
      <place>psiParameter().ofMethod(2, psiMethod().withName(&quot;PrintStream&quot;).withParameters(&quot;java.io.OutputStream&quot;, &quot;boolean&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.io.PrintStream&quot;))</place>
      <place>psiParameter().ofMethod(3, psiMethod().withName(&quot;String&quot;).withParameters(&quot;byte[]&quot;, &quot;int&quot;, &quot;int&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>JDBI (org.jdbi.v3.core)</display-name>
      <ignore-pattern>&lt;[a-zA-Z0-9_]+&gt;</ignore-pattern>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;add&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;org.jdbi.v3.core.statement.Batch&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;prepareBatch&quot;, &quot;createQuery&quot;, &quot;createCall&quot;, &quot;createScript&quot;, &quot;createUpdate&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;org.jdbi.v3.core.Handle&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;select&quot;, &quot;execute&quot;).withParameterCount(2).definedInClass(&quot;org.jdbi.v3.core.Handle&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Jodd (jodd.db)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;).withParameterCount(1).definedInClass(&quot;jodd.db.DbQuery&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;DbQuery&quot;).withParameterCount(2).definedInClass(&quot;jodd.db.DbQuery&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;query&quot;).withParameterCount(2).definedInClass(&quot;jodd.db.DbQuery&quot;))</place>
      <place>psiParameter().ofMethod(2, psiMethod().withName(&quot;DbQuery&quot;).withParameterCount(3).definedInClass(&quot;jodd.db.DbQuery&quot;))</place>
    </injection>
    <injection language="JSONPath" injector-id="java">
      <display-name>JsonAsserter (com.jayway.jsonpath)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;assertEquals&quot;).definedInClass(&quot;com.jayway.jsonassert.JsonAsserter&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;assertNotDefined&quot;).definedInClass(&quot;com.jayway.jsonassert.JsonAsserter&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;assertNotNull&quot;).definedInClass(&quot;com.jayway.jsonassert.JsonAsserter&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;assertNull&quot;).definedInClass(&quot;com.jayway.jsonassert.JsonAsserter&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;assertThat&quot;).definedInClass(&quot;com.jayway.jsonassert.JsonAsserter&quot;))</place>
    </injection>
    <injection language="http-url-reference" injector-id="java">
      <display-name>OkHttp (okhttp3)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;parse&quot;, &quot;get&quot;, &quot;newBuilder&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;okhttp3.HttpUrl&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;url&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;okhttp3.Request.Builder&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>QueryProducer (org.hibernate.query)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createNativeQuery&quot;).definedInClass(&quot;org.hibernate.query.QueryProducer&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createSQLQuery&quot;).definedInClass(&quot;org.hibernate.query.QueryProducer&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>QueryRunner (org.apache.commons.dbutils)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;batch&quot;).withParameterCount(2).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;insertBatch&quot;).withParameterCount(3).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;).withParameters(&quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;, &quot;execute&quot;).withParameters(&quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;update&quot;, &quot;execute&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;batch&quot;).withParameterCount(3).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;insertBatch&quot;).withParameterCount(4).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;query&quot;, &quot;insert&quot;, &quot;execute&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;org.apache.commons.dbutils.ResultSetHandler&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;update&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;java.lang.Object&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;update&quot;, &quot;execute&quot;).withParameters(&quot;java.sql.Connection&quot;, &quot;java.lang.String&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.apache.commons.dbutils.QueryRunner&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>R2DBC (io.r2dbc)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;add&quot;).definedInClass(&quot;io.r2dbc.spi.Batch&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createStatement&quot;).definedInClass(&quot;io.r2dbc.spi.Connection&quot;))</place>
    </injection>
    <injection language="PostgreSQL" injector-id="java">
      <display-name>Reactiverse Postgres Client (io.reactiverse)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.reactiverse.pgclient.PgConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.reactiverse.pgclient.PgTransaction&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.reactiverse.reactivex.pgclient.PgClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.reactiverse.reactivex.pgclient.PgConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.reactiverse.reactivex.pgclient.PgPool&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.reactiverse.reactivex.pgclient.PgTransaction&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.reactiverse.axle.pgclient.PgClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.reactiverse.pgclient.PgClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.reactiverse.pgclient.PgPool&quot;))</place>
    </injection>
    <injection language="RoomSql" injector-id="java">
      <display-name>Room Query annotation</display-name>
      <place>psiMethod().withName(&quot;value&quot;).withParameters().definedInClass(&quot;android.arch.persistence.room.DatabaseView&quot;)</place>
      <place>psiMethod().withName(&quot;value&quot;).withParameters().definedInClass(&quot;android.arch.persistence.room.Query&quot;)</place>
      <place>psiMethod().withName(&quot;value&quot;).withParameters().definedInClass(&quot;androidx.room.DatabaseView&quot;)</place>
      <place>psiMethod().withName(&quot;value&quot;).withParameters().definedInClass(&quot;androidx.room.Query&quot;)</place>
    </injection>
    <injection language="RoomSql" injector-id="java">
      <display-name>SQLiteDatabase methods</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;compileStatement&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;android.arch.persistence.db.SupportSQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;compileStatement&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;compileStatement&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;androidx.sqlite.db.SupportSQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;execSQL&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;android.arch.persistence.db.SupportSQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;execSQL&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;execSQL&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;androidx.sqlite.db.SupportSQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;execSQL&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object[]&quot;).definedInClass(&quot;android.arch.persistence.db.SupportSQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;execSQL&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object[]&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;execSQL&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object[]&quot;).definedInClass(&quot;androidx.sqlite.db.SupportSQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;rawQuery&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String[]&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;rawQuery&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String[]&quot;, &quot;android.os.CancellationSignal&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;validateSql&quot;).withParameters(&quot;java.lang.String&quot;, &quot;android.os.CancellationSignal&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;rawQueryWithFactory&quot;).withParameters(&quot;android.database.sqlite.SQLiteDatabase.CursorFactory&quot;, &quot;java.lang.String&quot;, &quot;java.lang.String[]&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
      <place>psiParameter().ofMethod(1, psiMethod().withName(&quot;rawQueryWithFactory&quot;).withParameters(&quot;android.database.sqlite.SQLiteDatabase.CursorFactory&quot;, &quot;java.lang.String&quot;, &quot;java.lang.String[]&quot;, &quot;java.lang.String&quot;, &quot;android.os.CancellationSignal&quot;).definedInClass(&quot;android.database.sqlite.SQLiteDatabase&quot;))</place>
    </injection>
    <injection language="RegExp" injector-id="java">
      <display-name>Scanner (java.util)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;findInLine&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.util.Scanner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;findWithinHorizon&quot;).withParameters(&quot;java.lang.String&quot;, &quot;int&quot;).definedInClass(&quot;java.util.Scanner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;hasNext&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.util.Scanner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;next&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.util.Scanner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;skip&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.util.Scanner&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;useDelimiter&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.util.Scanner&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Session.createNativeQuery (org.hibernate)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createNativeQuery&quot;).definedInClass(&quot;org.hibernate.reactive.mutiny.Mutiny.Session&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createNativeQuery&quot;).definedInClass(&quot;org.hibernate.reactive.mutiny.Mutiny.StatelessSession&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createNativeQuery&quot;).definedInClass(&quot;org.hibernate.reactive.stage.Stage.Session&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createNativeQuery&quot;).definedInClass(&quot;org.hibernate.reactive.stage.Stage.StatelessSession&quot;))</place>
    </injection>
    <injection language="HQL" injector-id="java">
      <display-name>Session.createQuery (org.hibernate)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createQuery&quot;).definedInClass(&quot;org.hibernate.Session&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createQuery&quot;).definedInClass(&quot;org.hibernate.query.QueryProducer&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createQuery&quot;).definedInClass(&quot;org.hibernate.reactive.mutiny.Mutiny.Session&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createQuery&quot;).definedInClass(&quot;org.hibernate.reactive.mutiny.Mutiny.StatelessSession&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createQuery&quot;).definedInClass(&quot;org.hibernate.reactive.stage.Stage.Session&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createQuery&quot;).definedInClass(&quot;org.hibernate.reactive.stage.Stage.StatelessSession&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>SmallRye Axle SqlClient (io.vertx.axle.sqlclient)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.axle.sqlclient.Pool&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.axle.sqlclient.SqlClient&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>SmallRye Mutiny SqlClient (io.vertx.mutiny.sqlclient)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.mutiny.sqlclient.Pool&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.mutiny.sqlclient.SqlClient&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>SmallRye Mutiny SqlConnection (io.vertx.mutiny.sqlclient)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;prepare&quot;, &quot;prepareAndAwait&quot;).definedInClass(&quot;io.vertx.mutiny.db2client.DB2Connection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;prepare&quot;, &quot;prepareAndAwait&quot;).definedInClass(&quot;io.vertx.mutiny.mysqlclient.MySQLConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;prepare&quot;, &quot;prepareAndAwait&quot;).definedInClass(&quot;io.vertx.mutiny.pgclient.PgConnection&quot;))</place>
    </injection>
    <injection language="SpEL" injector-id="java">
      <display-name>Spring @Cacheable and @CacheEvict</display-name>
      <place>psiMethod().withName(&quot;condition&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.CacheEvict&quot;)</place>
      <place>psiMethod().withName(&quot;condition&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.CachePut&quot;)</place>
      <place>psiMethod().withName(&quot;condition&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.Cacheable&quot;)</place>
      <place>psiMethod().withName(&quot;key&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.CacheEvict&quot;)</place>
      <place>psiMethod().withName(&quot;key&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.CachePut&quot;)</place>
      <place>psiMethod().withName(&quot;key&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.Cacheable&quot;)</place>
      <place>psiMethod().withName(&quot;unless&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.CachePut&quot;)</place>
      <place>psiMethod().withName(&quot;unless&quot;).withParameters().definedInClass(&quot;org.springframework.cache.annotation.Cacheable&quot;)</place>
    </injection>
    <injection language="http-header-reference" injector-id="java">
      <display-name>Spring HttpHeaders (org.springframework.http)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;header&quot;).definedInClass(&quot;org.springframework.http.ResponseEntity.HeadersBuilder&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;header&quot;).definedInClass(&quot;org.springframework.web.servlet.function.ServerResponse.HeadersBuilder&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;set&quot;, &quot;add&quot;, &quot;addAll&quot;, &quot;getFirst&quot;, &quot;containsKey&quot;, &quot;get&quot;, &quot;put&quot;, &quot;getFirstDate&quot;, &quot;setDate&quot;, &quot;setInstant&quot;, &quot;setZonedDateTime&quot;).definedInClass(&quot;org.springframework.http.HttpHeaders&quot;))</place>
    </injection>
    <injection language="SpEL" injector-id="java">
      <display-name>Spring Integration/Messaging</display-name>
      <place>psiMethod().withName(&quot;expression&quot;).withParameters().definedInClass(&quot;org.springframework.messaging.handler.annotation.Payload&quot;)</place>
      <place>psiMethod().withName(&quot;value&quot;).withParameters().definedInClass(&quot;org.springframework.integration.annotation.Payload&quot;)</place>
      <place>psiMethod().withName(&quot;value&quot;).withParameters().definedInClass(&quot;org.springframework.messaging.handler.annotation.Payload&quot;)</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Spring JDBC (org.springframework.jdbc.core.PreparedStatementCreatorFactory)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;PreparedStatementCreatorFactory&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;org.springframework.jdbc.core.PreparedStatementCreatorFactory&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;PreparedStatementCreatorFactory&quot;).withParameters(&quot;java.lang.String&quot;, &quot;int[]&quot;).definedInClass(&quot;org.springframework.jdbc.core.PreparedStatementCreatorFactory&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;PreparedStatementCreatorFactory&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.util.List&quot;).definedInClass(&quot;org.springframework.jdbc.core.PreparedStatementCreatorFactory&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Spring JDBC (org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;createCustomException&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;, &quot;java.sql.SQLException&quot;, &quot;java.lang.Class&quot;).definedInClass(&quot;org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;customTranslate&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;, &quot;java.sql.SQLException&quot;).definedInClass(&quot;org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;doTranslate&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;, &quot;java.sql.SQLException&quot;).definedInClass(&quot;org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;logTranslation&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;, &quot;java.sql.SQLException&quot;, &quot;boolean&quot;).definedInClass(&quot;org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator&quot;))</place>
    </injection>
    <injection language="RegExp" injector-id="java">
      <display-name>String (java.lang)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;matches&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;replaceAll&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;replaceFirst&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.String&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;split&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;split&quot;).withParameters(&quot;java.lang.String&quot;, &quot;int&quot;).definedInClass(&quot;java.lang.String&quot;))</place>
    </injection>
    <injection language="RegExp" injector-id="java">
      <display-name>StringSubject (com.google.common.truth)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;containsMatch&quot;).definedInClass(&quot;com.google.common.truth.StringSubject&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;doesNotContainMatch&quot;).definedInClass(&quot;com.google.common.truth.StringSubject&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;doesNotMatch&quot;).definedInClass(&quot;com.google.common.truth.StringSubject&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;matches&quot;).definedInClass(&quot;com.google.common.truth.StringSubject&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Vert.x SQL Extensions (io.vertx.ext.sql)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;queryWithParams&quot;, &quot;queryStream&quot;, &quot;queryStreamWithParams&quot;, &quot;querySingle&quot;, &quot;querySingleWithParams&quot;, &quot;update&quot;, &quot;updateWithParams&quot;, &quot;call&quot;, &quot;callWithParams&quot;).definedInClass(&quot;io.vertx.ext.sql.SQLClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;queryWithParams&quot;, &quot;queryStream&quot;, &quot;queryStreamWithParams&quot;, &quot;querySingle&quot;, &quot;querySingleWithParams&quot;, &quot;update&quot;, &quot;updateWithParams&quot;, &quot;call&quot;, &quot;callWithParams&quot;).definedInClass(&quot;io.vertx.ext.sql.SQLOperations&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;queryWithParams&quot;, &quot;queryStream&quot;, &quot;queryStreamWithParams&quot;, &quot;querySingle&quot;, &quot;querySingleWithParams&quot;, &quot;update&quot;, &quot;updateWithParams&quot;, &quot;call&quot;, &quot;callWithParams&quot;, &quot;execute&quot;, &quot;batchWithParams&quot;, &quot;batchCallableWithParams&quot;).definedInClass(&quot;io.vertx.ext.sql.SQLConnection&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Vert.x SQL Reactive Extensions (io.vertx.reactivex.ext.sql)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;queryWithParams&quot;, &quot;queryStream&quot;, &quot;queryStreamWithParams&quot;, &quot;querySingle&quot;, &quot;querySingleWithParams&quot;, &quot;update&quot;, &quot;updateWithParams&quot;, &quot;call&quot;, &quot;callWithParams&quot;).definedInClass(&quot;io.vertx.reactivex.ext.sql.SQLOperations&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;queryWithParams&quot;, &quot;queryStream&quot;, &quot;queryStreamWithParams&quot;, &quot;querySingle&quot;, &quot;querySingleWithParams&quot;, &quot;update&quot;, &quot;updateWithParams&quot;, &quot;call&quot;, &quot;callWithParams&quot;, &quot;execute&quot;, &quot;batchWithParams&quot;, &quot;batchCallableWithParams&quot;, &quot;rxQuerySingle&quot;, &quot;rxQuerySingleWithParams&quot;, &quot;rxQuery&quot;, &quot;rxQueryWithParams&quot;, &quot;rxQueryStream&quot;, &quot;rxQueryStreamWithParams&quot;, &quot;rxUpdate&quot;, &quot;rxUpdateWithParams&quot;, &quot;rxCall&quot;, &quot;rxCallWithParams&quot;, &quot;rxExecute&quot;, &quot;rxBatchWithParams&quot;, &quot;rxBatchCallableWithParams&quot;).definedInClass(&quot;io.vertx.reactivex.ext.sql.SQLClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;queryWithParams&quot;, &quot;queryStream&quot;, &quot;queryStreamWithParams&quot;, &quot;querySingle&quot;, &quot;querySingleWithParams&quot;, &quot;update&quot;, &quot;updateWithParams&quot;, &quot;call&quot;, &quot;callWithParams&quot;, &quot;execute&quot;, &quot;batchWithParams&quot;, &quot;batchCallableWithParams&quot;, &quot;rxQuerySingle&quot;, &quot;rxQuerySingleWithParams&quot;, &quot;rxQuery&quot;, &quot;rxQueryWithParams&quot;, &quot;rxQueryStream&quot;, &quot;rxQueryStreamWithParams&quot;, &quot;rxUpdate&quot;, &quot;rxUpdateWithParams&quot;, &quot;rxCall&quot;, &quot;rxCallWithParams&quot;, &quot;rxExecute&quot;, &quot;rxBatchWithParams&quot;, &quot;rxBatchCallableWithParams&quot;).definedInClass(&quot;io.vertx.reactivex.ext.sql.SQLConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;querySingle&quot;, &quot;rxQuerySingle&quot;, &quot;querySingleWithParams&quot;, &quot;rxQuerySingleWithParams&quot;).definedInClass(&quot;io.vertx.reactivex.ext.asyncsql.AsyncSQLClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;querySingle&quot;, &quot;rxQuerySingle&quot;, &quot;querySingleWithParams&quot;, &quot;rxQuerySingleWithParams&quot;).definedInClass(&quot;io.vertx.reactivex.ext.asyncsql.MySQLClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;querySingle&quot;, &quot;rxQuerySingle&quot;, &quot;querySingleWithParams&quot;, &quot;rxQuerySingleWithParams&quot;).definedInClass(&quot;io.vertx.reactivex.ext.asyncsql.PostgreSQLClient&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Vert.x SqlClient (io.vertx.sqlclient)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.mssqlclient.MSSQLConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.mysqlclient.MySQLConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.pgclient.PgConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.sqlclient.Pool&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.sqlclient.SqlClient&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.sqlclient.SqlConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;).definedInClass(&quot;io.vertx.sqlclient.Transaction&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>Vert.x SqlClient RxJava2 (io.vertx.reactivex.sqlclient)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.mysqlclient.MySQLConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.pgclient.PgConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.sqlclient.SqlConnection&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPrepare&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.sqlclient.Transaction&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.mysqlclient.MySQLPool&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.pgclient.PgPool&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.sqlclient.Pool&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;prepare&quot;, &quot;preparedQuery&quot;, &quot;preparedBatch&quot;, &quot;rxQuery&quot;, &quot;rxPreparedQuery&quot;, &quot;rxPreparedBatch&quot;).definedInClass(&quot;io.vertx.reactivex.sqlclient.SqlClient&quot;))</place>
    </injection>
    <injection language="JSONPath" injector-id="java">
      <display-name>WriteContext (com.jayway.jsonpath)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;add&quot;).definedInClass(&quot;com.jayway.jsonpath.WriteContext&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;delete&quot;).definedInClass(&quot;com.jayway.jsonpath.WriteContext&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;map&quot;).definedInClass(&quot;com.jayway.jsonpath.WriteContext&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;put&quot;).definedInClass(&quot;com.jayway.jsonpath.WriteContext&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;renameKey&quot;).definedInClass(&quot;com.jayway.jsonpath.WriteContext&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;set&quot;).definedInClass(&quot;com.jayway.jsonpath.WriteContext&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>jOOQ (org.jooq.DSLContext)</display-name>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;batch&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object[]...&quot;).definedInClass(&quot;org.jooq.DSLContext&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;fetch&quot;, &quot;fetchLazy&quot;, &quot;fetchAsync&quot;, &quot;fetchStream&quot;, &quot;fetchMany&quot;, &quot;fetchOne&quot;, &quot;fetchSingle&quot;, &quot;fetchOptional&quot;, &quot;fetchValue&quot;, &quot;fetchOptionalValue&quot;, &quot;fetchValues&quot;, &quot;execute&quot;, &quot;resultQuery&quot;).withParameters(&quot;java.lang.String&quot;, &quot;java.lang.Object...&quot;).definedInClass(&quot;org.jooq.DSLContext&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;query&quot;, &quot;fetch&quot;, &quot;fetchLazy&quot;, &quot;fetchAsync&quot;, &quot;fetchStream&quot;, &quot;fetchMany&quot;, &quot;fetchOne&quot;, &quot;fetchSingle&quot;, &quot;fetchOptional&quot;, &quot;fetchValue&quot;, &quot;fetchOptionalValue&quot;, &quot;fetchValues&quot;, &quot;execute&quot;, &quot;resultQuery&quot;, &quot;batch&quot;).withParameters(&quot;java.lang.String&quot;).definedInClass(&quot;org.jooq.DSLContext&quot;))</place>
      <place>psiParameter().ofMethod(psiMethod().withName(&quot;batch&quot;).withParameters(&quot;java.lang.String...&quot;).definedInClass(&quot;org.jooq.DSLContext&quot;))</place>
    </injection>
    <injection language="SQL" injector-id="java">
      <display-name>rxjava2-jdbc (org.davidmoten.rx.jdbc)</display-name>
      <place>psiMethod().withName(&quot;value&quot;).definedInClass(&quot;org.davidmoten.rx.jdbc.annotations.Query&quot;)</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;call&quot;, &quot;select&quot;, &quot;update&quot;).definedInClass(&quot;org.davidmoten.rx.jdbc.Database&quot;))</place>
      <place>psiParameter().ofMethod(0, psiMethod().withName(&quot;call&quot;, &quot;select&quot;, &quot;update&quot;).definedInClass(&quot;org.davidmoten.rx.jdbc.TransactedBuilder&quot;))</place>
    </injection>
    <injection language="SQLite" injector-id="js">
      <display-name>flash.data (SQLite)</display-name>
      <place>jsLiteral().and(asAssignedValue(&quot;text&quot;, &quot;*&quot;, &quot;dbStatement&quot;))</place>
      <place>jsLiteral().and(asAssignedValue(&quot;text&quot;, &quot;flash.data.SQLStatement&quot;))</place>
    </injection>
    <injection language="RegExp" injector-id="kotlin">
      <display-name>Kotlin</display-name>
      <place>kotlinParameter().ofFunction(0, kotlinFunction().withName(&quot;Regex&quot;).definedInClass(&quot;kotlin.text.Regex&quot;))</place>
      <place>receiver().ofFunction(kotlinFunction().withName(&quot;toPattern&quot;).withReceiver(&quot;kotlin.String&quot;).definedInPackage(&quot;kotlin.text&quot;))</place>
      <place>receiver().ofFunction(kotlinFunction().withName(&quot;toRegex&quot;).withReceiver(&quot;kotlin.String&quot;).definedInPackage(&quot;kotlin.text&quot;))</place>
    </injection>
    <injection language="JSON" injector-id="sql">
      <display-name>ClickHouse JSON</display-name>
      <place>sqlElement().forDialects(&quot;ClickHouse&quot;).functionArgument(0, sqlFunctionCall().name(&quot;visitParamHas&quot;, &quot;visitParamExtractUInt&quot;, &quot;visitParamExtractInt&quot;, &quot;visitParamExtractFloat&quot;, &quot;visitParamExtractBool&quot;, &quot;visitParamExtractRaw&quot;, &quot;visitParamExtractString&quot;).params(sqlExpressions().count(2)))</place>
      <place>sqlElement().forDialects(&quot;ClickHouse&quot;).insertWithFormatInput(&quot;JSON&quot;)</place>
    </injection>
    <injection language="JSON" injector-id="sql">
      <display-name>Oracle JSON</display-name>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(0, -1, 1, sqlFunctionCall().name(&quot;json_array&quot;))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(0, sqlFunctionCall().name(&quot;json_query&quot;, &quot;json_value&quot;, &quot;json_array_agg&quot;))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(0, sqlFunctionCall().name(&quot;json_table&quot;))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, -1, 2, sqlFunctionCall().name(&quot;json_object&quot;))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;json_object_agg&quot;))</place>
    </injection>
    <injection language="RegExp" injector-id="sql">
      <display-name>Oracle RegExp</display-name>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;regexp_count&quot;).params(sqlExpressions().count(2, 4)))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;regexp_instr&quot;).params(sqlExpressions().count(2, 7)))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;regexp_like&quot;).params(sqlExpressions().count(2, 3)))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;regexp_replace&quot;, &quot;regexp_substr&quot;).params(sqlExpressions().count(2, 6)))</place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Oracle XPath</display-name>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(0, sqlFunctionCall().name(&quot;xmlquery&quot;, &quot;xmlexists&quot;))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(0, sqlFunctionCall().name(&quot;xmltable&quot;))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, -2, 2, sqlFunctionCall().name(&quot;updatexml&quot;))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;appendchildxml&quot;, &quot;insertxmlafter&quot;, &quot;insertxmlbefore&quot;).params(sqlExpressions().count(3, 4)))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;extract&quot;, &quot;extractvalue&quot;, &quot;deletexml&quot;, &quot;existsnode&quot;).params(sqlExpressions().count(2, 3)))</place>
      <place>sqlElement().forDialects(&quot;Oracle&quot;).functionArgument(1, sqlFunctionCall().name(&quot;insertchildxml&quot;, &quot;insertchildxmlafter&quot;, &quot;insertchildxmlbefore&quot;).params(sqlExpressions().count(4, 5)))</place>
    </injection>
    <injection language="RegExp" injector-id="sql">
      <display-name>PostgreSQL RegExp</display-name>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).binaryExpressionArgument(1, sqlBinaryExpression().left(sqlExpression().withType(&quot;text&quot;)).operationNames(&quot;~&quot;, &quot;~*&quot;, &quot;!~&quot;, &quot;!~*&quot;))</place>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(1, sqlFunctionCall().name(&quot;regexp_replace&quot;).params(sqlExpressions().count(3, 4)))</place>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(1, sqlFunctionCall().name(&quot;substr&quot;, &quot;substring&quot;, &quot;regexp_match&quot;, &quot;regexp_matches&quot;, &quot;regexp_split_to_array&quot;, &quot;regexp_split_to_table&quot;).params(sqlExpressions().count(2, 3)))</place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>PostgreSQL XPath</display-name>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(0, sqlFunctionCall().name(&quot;xmlexists&quot;, &quot;xmltable&quot;).params(sqlExpressions().count(2)))</place>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(0, sqlFunctionCall().name(&quot;xpath&quot;, &quot;xpath_exists&quot;).params(sqlExpressions().count(2, 3)))</place>
    </injection>
    <injection language="PostgreSQL" injector-id="sql">
      <display-name>PostgreSQL dblink</display-name>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(0, sqlFunctionCall().name(&quot;dblink&quot;, &quot;dblink_exec&quot;).params(sqlExpressions().count(1, 2).atOpt(1, sqlExpression().withType(&quot;boolean&quot;))))</place>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(1, sqlFunctionCall().name(&quot;dblink&quot;, &quot;dblink_exec&quot;).params(sqlExpressions().count(2, 3)))</place>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(1, sqlFunctionCall().name(&quot;dblink_open&quot;).params(sqlExpressions().count(2, 3).atOpt(2, sqlExpression().withType(&quot;boolean&quot;))))</place>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(1, sqlFunctionCall().name(&quot;dblink_send_query&quot;).params(sqlExpressions().count(2)))</place>
      <place>sqlElement().forDialects(&quot;PostgreSQL&quot;).functionArgument(2, sqlFunctionCall().name(&quot;dblink_open&quot;).params(sqlExpressions().count(3, 4)))</place>
    </injection>
    <injection language="XML" injector-id="sql">
      <display-name>Sybase XML</display-name>
      <place>sqlElement().forDialects(&quot;Sybase&quot;).binaryExpressionArgument(1, sqlBinaryExpression().operation(leafTokens(&quot;xmltest&quot;).or(&quot;not&quot;, &quot;xmltest&quot;)))</place>
      <place>sqlElement().forDialects(&quot;Sybase&quot;).functionArgument(0, sqlFunctionCall().name(&quot;xmlparse&quot;, &quot;xmlvalidate&quot;))</place>
      <place>sqlElement().forDialects(&quot;Sybase&quot;).functionArgument(1, sqlFunctionCall().name(&quot;xmlextract&quot;))</place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Sybase XPath</display-name>
      <place>sqlElement().forDialects(&quot;Sybase&quot;).binaryExpressionArgument(0, sqlBinaryExpression().operation(leafTokens(&quot;xmltest&quot;).or(&quot;not&quot;, &quot;xmltest&quot;)))</place>
      <place>sqlElement().forDialects(&quot;Sybase&quot;).functionArgument(0, sqlFunctionCall().name(&quot;xmlextract&quot;))</place>
    </injection>
    <injection language="SpEL" injector-id="xml">
      <display-name>SpEL for Spring Cache</display-name>
      <place>xmlAttribute().withLocalName(&quot;condition&quot;).withParent(xmlTag().withNamespace(string().equalTo(&quot;http://www.springframework.org/schema/cache&quot;)))</place>
      <place>xmlAttribute().withLocalName(&quot;key&quot;).withParent(xmlTag().withNamespace(string().equalTo(&quot;http://www.springframework.org/schema/cache&quot;)))</place>
      <place>xmlAttribute().withLocalName(&quot;unless&quot;).withParent(xmlTag().withNamespace(string().equalTo(&quot;http://www.springframework.org/schema/cache&quot;)))</place>
    </injection>
  </component>
</application>